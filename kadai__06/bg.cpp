/*******************************************************************************
* タイトル:		bgプログラム
* プログラム名:	bg.cpp
* 作成者:		GP11B341 01 飯塚春輝
* 作成日:		2018/06/29
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "bg.h"
#include "player.h"
#include "enemy.h"
#include "batoru.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
char map[FH_MAX][FW_MAX + 1] = { // 横を+1しているのは文末のNULLの分
	"********************************************************************************",
	"*                                               <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*",
	"*                                               >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*",
	"*                                               <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*",
	"*                                               >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*",
	"*                                                                              *",
	"*~>                                                                            *",
	"*~~~~>                                                                         *",
	"*~~~~~~>                                                                       *",
	"*~~~~~~~~~>                                                                    *",
	"*~~~~~>                                                                        *",
	"*~~~>                                                                          *",
	"********************************************************************************",
	"********************************************************************************",
};




/*******************************************************************************
関数名:	void InitBG( void )
引数:	void
戻り値:	void
説明:	bgの初期化処理
*******************************************************************************/
void InitBG(void)
{

}


/*******************************************************************************
関数名:	void UpdateBG( void )
引数:	void
戻り値:	void
説明:	bgの更新処理
*******************************************************************************/
void UpdateBG(void)
{

}

/*******************************************************************************
関数名:	void DrawBG( void )
引数:	void
戻り値:	void
説明:	BG表示 ( BG = バックグラウンド・背景の略だよ )
*******************************************************************************/
void DrawBG(void)
{
	int		i;
	PLAYER	*player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する
	ENEMY *enemy = GetEnemyAdr(0);	// enemy０番のアドレスを取得する

	/* 画面クリア */
	system("cls");

	/* マップ描画処理 */
	for (i = 0; i < FH_MAX; i++)
	{
		printf("%s\n", &map[i][0]);
	}

	printf("%s : player->fx = %d player->fy = %d\n", &player->name[0], player->fx, player->fy);

	printf("%s : enemy->fx  = %d enemy->fy  = %d\n", &enemy->name[0],enemy->fx, enemy->fy);

	if ((player->fx == enemy->fx) && (player->fy == enemy->fy))
	{
		printf("モンスターと遭遇した!!\n");

		rewind(stdin);
		getchar();

		// ここでバトル関数へ飛ぶ
		system("cls");


		 DrawBatoru();			// batoruの描画処理


		rewind(stdin);
		getchar();

		system("cls");
		printf("フィールドへ戻るよ！ Hit Any Key.\n");

			// バトルから戻ってきたらエネミーを再POP
			enemy->fx = rand() % (45);
			enemy->fy = 6;
			map[enemy->fy][enemy->fx] = 'E';
		// プレイヤーを元の位置で再表示


		map[player->fy][player->fx] = 'P';

	}
	else
	{
		printf("Push Key ← → ↑↓\n");
	}
}


/*******************************************************************************
関数名:	void UninitBG( void )
引数:	void
戻り値:	void
説明:	bgの終了処理
*******************************************************************************/
void UninitBG(void)
{
	// 現時点では特にやる事が無いっす
	// DirectXではメモリの解放等を行うっす
}
/*******************************************************************************
関数名:	char *GetMapAdr( void )
引数:	int y : Y座標
int x : X座標
戻り値:	char *
説明:	フィールドのアドレスを取得する
*******************************************************************************/
char *GetMapAdr(int y, int x)
{
	return &map[y][x];
}
