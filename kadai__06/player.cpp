/*******************************************************************************
* タイトル:		プレイヤープログラム
* プログラム名:	player.cpp
* 作成者:		GP11B341 01 飯塚春輝
* 作成日:		2018/06/29
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "player.h"
#include"Batoru.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
PLAYER	player[PLAYER_MAX];		// プレイヤー構造体の配列（メンバー数分）


/*******************************************************************************
関数名:	void InitPlayer( void )
引数:	void
戻り値:	void
説明:	プレイヤーの初期化処理
*******************************************************************************/
void InitPlayer(void)
{
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	char   *map;

	/* プレイヤーの初期位置設定 */
	player->fx = 1;
	player->fy = 1;

	map = GetMapAdr(player->fy, player->fx);	// フィールドのアドレスを取得
	*map = 'P';								// プレイヤー記号を書き込む


	strcpy(&player->name[0], "tono");
	player->HP = 100;
	player->MP = 50;
	player->ATK = 30;
	player->DEF = 20;
	player->EXP = 0;
	player->LV = 1;

	player->MAX_HP = 100;
	player->MAX_MP = 50;
	player->MAX_LV = 0;

}


/*******************************************************************************
関数名:	void UpdatePlayer( void )
引数:	void
戻り値:	void
説明:	プレイヤーの更新処理
*******************************************************************************/
void UpdatePlayer(void)
{
	int key;
	int old_x, old_y;
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する
	char *map;

	/* キーが入力されたら */
	key = _getch();
	if ((key == 0) || (key == 224))
	{
		key = _getch();
	}

	/* 前回の表示位置の消去*/
	map = GetMapAdr(player->fy, player->fx);	// フィールドのアドレスを取得
	*map = ' ';

	/* プレイヤーの位置判定 */
	old_x = player->fx;
	old_y = player->fy;
	switch (key)
	{
	case 'a':
	case 0x4b:	// 左へ移動する
		player->fx--;
		break;

	case 'd':
	case 0x4d:	// 右へ移動する
		player->fx++;
		break;

	case 'w':
	case 0x48:	// 上へ移動する
		player->fy--;
		break;

	case 's':
	case 0x50:	// 下へ移動する
		player->fy++;
		break;

	default:	// 移動しない
		break;
	}

	// 移動した先はNGな所？
	map = GetMapAdr(player->fy, player->fx);	// フィールドのアドレスを取得
	if (*map == '*')
	{	// NGなら移動前の場所に戻す
		player->fx = old_x;
		player->fy = old_y;
	}
	if (*map == '<')
	{	
		player->fx = old_x;
		player->fy = old_y;
	}
	if (*map == '>')
	{
		player->fx = old_x;
		player->fy = old_y;
	}
	if (*map == '~')
	{
		player->fx = old_x;
		player->fy = old_y;
	}

}


/*******************************************************************************
関数名:	void DrawPlayer( void )
引数:	void
戻り値:	void
説明:	プレイヤーの描画処理
*******************************************************************************/
void DrawPlayer(void)
{
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する
	char *map = GetMapAdr(player->fy, player->fx);	// フィールドのアドレスを取得

	/* プレイヤーの位置更新 */
	*map = 'P';

}


/*******************************************************************************
関数名:	void UninitPlayer( void )
引数:	void
戻り値:	void
説明:	プレイヤーの終了処理
*******************************************************************************/
void UninitPlayer(void)
{
	// 現時点では特にやる事が無いっす
	// DirectXではメモリの解放等を行うっす
}


/*******************************************************************************
関数名:	PLAYER *GetMapAdr( int pno )
引数:	int pno : プレイヤー番号
戻り値:	PLAYER *
説明:	プレイヤーのアドレスを取得する
*******************************************************************************/
PLAYER *GetPlayerAdr(int pno)
{
	return &player[pno];
}

