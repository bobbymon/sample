/*******************************************************************************
* タイトル:		enemyプログラム
* プログラム名:	enemy.cpp
* 作成者:		GP11B341 01 飯塚春輝
* 作成日:		2018/06/29
********************************************************************************

/***************************************************************************
* インクルードファイル****
*******************************************************************************/
#include "main.h"
#include "enemy.h"
#include"player.h"

/*******************************************************************************
* マクロ定義
*******************************************************************************/



/*******************************************************************************
* 構造体定義
*******************************************************************************/



/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/



/*******************************************************************************
マクロ定義
*******************************************************************************/



/*******************************************************************************
* グローバル変数
*******************************************************************************/
ENEMY	enemy[ENEMY_MAX];		// enemy構造体の配列（メンバー数分）


/*******************************************************************************
関数名:	void InitEnemy( void )
引数:	void
戻り値:	void
説明:	エネミーの初期化処理
*******************************************************************************/
void InitEnemy(void)
{

	ENEMY *enemy = GetEnemyAdr(0);	// enemy０番のアドレスを取得する
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	char   *map;
		/* 敵の初期位置設定 */
		enemy->fx = rand() % (45);
		enemy->fy = 6;

		map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得
		*map = 'E';


		strcpy(&enemy->name[0], "bake");
		enemy->HP = 50;
		enemy->MP = 50;
		enemy->ATK = 30;
		enemy->DEF = 20;


}



/*******************************************************************************
関数名:	void UpdateEnemy( void )
引数:	void
戻り値:	void
説明:	エネミーの更新処理
*******************************************************************************/
void UpdateEnemy(void)
{
	int key;
	int old_x, old_y;

	ENEMY *enemy = GetEnemyAdr(0);	// enemy０番のアドレスを取得する
	PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	char *map;

		/* キーが入力されたら */
		key = _getch();
		if ((key == 0) || (key == 224))
		{
			key = _getch();
		}



		/* 前回の表示位置の消去*/
		map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得
		*map = ' ';

		old_x = enemy->fx;
		old_y = enemy->fy;
		key = rand() % 5;	// 移動無しも含めるので５(この数字を大きくすれば動きにくい敵となる)
		switch (key)
		{
		case 0:				// 左へ移動する
			enemy->fx--;
			break;
		case 1:				// 右へ移動する
			enemy->fx++;
			break;
		case 2:				// 上へ移動する
			enemy->fy--;
			break;
		case 3:				// 下へ移動する
			enemy->fy++;
			break;
		default:			// 動かない
			break;
		}

		// 移動した先はNGな所？
		map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得
		if (*map == '*')

		{	// NGなら移動前の場所に戻す
			enemy->fx = old_x;
			enemy->fy = old_y;
		}
		if (*map == '<')
		{
			enemy->fx = old_x;
			enemy->fy = old_y;
		}
		if (*map == '>')
		{
			enemy->fx = old_x;
			enemy->fy = old_y;
		}
		if (*map == '~')
		{
			enemy->fx = old_x;
			enemy->fy = old_y;
		}
	

		if (player->MAX_LV > 4)
		{


			/* キーが入力されたら */
			key = _getch();
			if ((key == 0) || (key == 224))
			{
				key = _getch();
			}



			/* 前回の表示位置の消去*/
			map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得
			*map = ' ';

			old_x = enemy->fx;
			old_y = enemy->fy;
			key = rand() % 3;	// 移動無しも含めるので５(この数字を大きくすれば動きにくい敵となる)
			switch (key)
			{
			case 0:				// 左へ移動する
				enemy->fx--;
				break;
			case 1:				// 右へ移動する
				enemy->fx++;
				break;
			case 2:				// 上へ移動する
				enemy->fy--;
				break;
			case 3:				// 下へ移動する
				enemy->fy++;
				break;
			default:			// 動かない
				break;
			}

			// 移動した先はNGな所？
			map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得
			if (*map == '*')

			{	// NGなら移動前の場所に戻す
				enemy->fx = old_x;
				enemy->fy = old_y;
			}
			if (*map == '<')
			{
				enemy->fx = old_x;
				enemy->fy = old_y;
			}
			if (*map == '>')
			{
				enemy->fx = old_x;
				enemy->fy = old_y;
			}
			if (*map == '~')
			{
				enemy->fx = old_x;
				enemy->fy = old_y;
			}
		}
}


/*******************************************************************************
関数名:	void DrawEnemy( void )
引数:	void
戻り値:	void
説明:	エネミーの描画処理
*******************************************************************************/
void DrawEnemy(void)
{



	 ENEMY *enemy= GetEnemyAdr(0);	// enemy０番のアドレスを取得する
	 PLAYER *player = GetPlayerAdr(0);	// プレイヤー０番のアドレスを取得する

	char *map = GetMapAdr(enemy->fy, enemy->fx);	// フィールドのアドレスを取得

		/* エネミーの位置更新 */
		*map = 'E';

		if (player->MAX_LV > 4)
		{
			*map = 'T';
		}
}



/*******************************************************************************
関数名:	void UninitEnemy( void )
引数:	void
戻り値:	void
説明:	エネミーの終了処理
*******************************************************************************/
void UninitEnemy(void)
{
	// 現時点では特にやる事が無いっす
	// DirectXではメモリの解放等を行うっす
}


/*******************************************************************************
関数名:	ENEMY *GetMapAdr( int pno )
引数:	int pno : プレイヤー番号
戻り値:	ENEMY *
説明:	enemyのアドレスを取得する
*******************************************************************************/
ENEMY *GetEnemyAdr(int pno)
{
	return &enemy[pno];
}

